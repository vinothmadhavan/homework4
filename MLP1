To implement the `MLPPlanner` class, we need to design a multi-layer perceptron (MLP) that takes the left and right lane boundaries as input and predicts the future waypoints of the vehicle. Here's a step-by-step guide to complete the class:

1. **Initialize the MLP Layers**: We need to define the layers of the MLP in the `__init__` method. The input to the MLP will be the concatenated left and right track boundaries, and the output will be the predicted waypoints.

2. **Define the Forward Pass**: In the `forward` method, we will concatenate the left and right track boundaries, pass them through the MLP, and output the predicted waypoints.

3. **Choose a Loss Function**: Since the waypoints are real-valued, a suitable loss function would be the Mean Squared Error (MSE) loss, which is commonly used for regression tasks.

Here's how you can implement the `MLPPlanner` class:

```python
import torch
import torch.nn as nn
import torch.nn.functional as F

class MLPPlanner(nn.Module):
    def __init__(
        self,
        n_track: int = 10,
        n_waypoints: int = 3,
    ):
        """
        Args:
            n_track (int): number of points in each side of the track
            n_waypoints (int): number of waypoints to predict
        """
        super().__init__()

        self.n_track = n_track
        self.n_waypoints = n_waypoints

        # Define the MLP layers
        # Input size is 2 * n_track * 2 because we concatenate left and right track boundaries
        input_size = 2 * n_track * 2
        hidden_size = 64  # You can adjust the hidden size
        output_size = n_waypoints * 2  # Each waypoint has 2 coordinates (x, y)

        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, output_size)

    def forward(
        self,
        track_left: torch.Tensor,
        track_right: torch.Tensor,
        **kwargs,
    ) -> torch.Tensor:
        """
        Predicts waypoints from the left and right boundaries of the track.

        Args:
            track_left (torch.Tensor): shape (b, n_track, 2)
            track_right (torch.Tensor): shape (b, n_track, 2)

        Returns:
            torch.Tensor: future waypoints with shape (b, n_waypoints, 2)
        """
        # Concatenate left and right track boundaries
        batch_size = track_left.size(0)
        x = torch.cat((track_left, track_right), dim=2)  # Shape: (b, n_track, 4)
        x = x.view(batch_size, -1)  # Flatten to shape: (b, 2 * n_track * 2)

        # Pass through MLP
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)

        # Reshape output to (b, n_waypoints, 2)
        waypoints = x.view(batch_size, self.n_waypoints, 2)
        return waypoints
```

### Explanation:
- **Initialization**: We define three fully connected layers (`fc1`, `fc2`, `fc3`). The input size is determined by the concatenated left and right track boundaries, and the output size is determined by the number of waypoints times 2 (for x and y coordinates).
- **Forward Pass**: We concatenate the left and right track boundaries along the last dimension, flatten the result, and pass it through the MLP. The output is reshaped to match the desired shape of the waypoints.
- **Activation Function**: We use ReLU activation after the first two layers to introduce non-linearity.

This implementation provides a basic MLP model for predicting waypoints. You can experiment with different architectures, such as adding more layers or changing the hidden size, to improve performance.
